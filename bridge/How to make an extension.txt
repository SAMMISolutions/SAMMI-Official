=================================
Building SAMMI Extensions
=================================
---------------------------------
- 1. Overview and Prerequisites -
---------------------------------

This document will provide an introduction to creating custom SAMMI (SEF) extensions.  Creating new extension files requires knowledge of JavaScript programming, and a strong understanding of SAMMI variable types and commands.  Manual receiver protocol usage and executing hooks from receiver requests are outside of the scope of this introductory documentation.

All SAMMI extensions are Microsoft Windows format text files saved with an .sef file extension.  It is highly recommended to review other extensions to get a better idea on the different sections of the extension file and how they work.  You can also copy and modify the basic extension example or use the empty template content from section 2 below into a new .sef file to get started.

For questions or issues creating SEF extensions, visit the official SAMMI Discord server (https://discord.gg/dXez8Zh) and post in the Extension section #development channel.  Please remember that there are a limited number of users on the Discord server that can assist with extension development and that they are all volunteers.

------------------------------
- 2. Extension Template File -
------------------------------

See the \bridge\template.sef file under the main SAMMI folder for an empty extension template.

You can find an example on how to code extension here:
https://sammi.solutions/extensions/build

------------------------------
- 3. Extension File Sections -
------------------------------

[extension_name]

This section names your extension, and is visible in SAMMI Bridge and SAMMI Core. Please use alphanumeric characters and spaces only.

[extension_info]

This section is for descriptive text about the extension, e.g. what the extension does. This information is displayed to the users in SAMMI Bridge-Extensions tab when they hover over the extension name inside the list of installed extensions.

[extension_version]

Specify your extension version here, using numbers and dots (e.g., 2.01). This is crucial for the automatic version checker in Bridge, which can notify users of updates. 
This will be later used in an automatic version checker where you will be able to submit your PRs to our public repo whenever you release a new version of your extension.

[insert_external]

This section appears inside the extension’s tab in Bridge, and it provides a visual interface for the extension if needed. It’s written in HTML and CSS.

[insert_command]

In this section, you can define Extension Commands. These commands will be available to users in SAMMI Core when they install your extension. You can define multiple commands in this section. Refer to the SAMMI Bridge documentation for Extension Command details.
In this section, you can also automatically call your main extension function that should run as soon as SAMMI connects to Bridge.
Use the SAMMI.extCommand helper function outlined in the transmitter documentation to create a new command:

https://github.com/SAMMISolutions/SAMMI-Bridge#helper-functions

An extension can add more than one SAMMI.extCommand block to create multiple button commands in the receiver.  Each SAMMI.extCommand block sets the name of a new extension command in the receiver, the command's color, height, and a JavaScript object defining the set of fields/boxes to show in the receiver UI for the command.

[insert_hook]

This is an outdated, not recommended way to listen for command payloads coming from SAMMI Core. We strongly recommend using regular listeners instead. Hooks are supported for backward compatibility only.

You can learn how to listen to events from SAMMI here:
https://github.com/SAMMISolutions/SAMMI-Bridge#listening-to-extension-data-received-from-sammi

[insert_script]

In this section, you’re encouraged to write your own JavaScript code.

We recommend having one main function that runs as soon as SAMMI connects to Bridge, and which you call from [insert_command] section.
Inside this function, you can set up listeners for extension commands coming from SAMMI, e.g. when a user actually runs a button containing your extension command you defined in [insert_command] section.

Learn more about Listening to Extension Commands in the SAMMI Bridge documentation.

SAMMI Bridge provides premade helper functions for you to use, such as retrieving variables, setting variables, triggering buttons and more. You can find all the helper functions in the SAMMI Bridge documentation

https://github.com/SAMMISolutions/SAMMI-Bridge#helper-functions

[insert_over]

In this section you simply copy and paste your deck from SAMMI Core you wish to distribute with your extension. When users install your extension, the deck will be automatically added to their SAMMI Core.

You can also add the following extra keys in the JSON object to specify additional properties for your extension:

- "sammi_version": "2.00.0" - Checks for minimum SAMMI version compatibility. Will refuse to install the extension if the version is lower than specified.
- "bridge": true - Checks whether SAMMI Bridge is running and connected to SAMMI. Will refuse to install the extension if Bridge is not running.
- "obswebsocket": "4.9.1" - Checks minimum OBS Websocket version compatibility. Will refuse to install the extension if the version is lower than specified.
- "extension_triggers": ["TRG1", "TRG", ...] - Specicies extension triggers that run in SAMMI Core as soon as the extension is installed. Useful for automatically triggering extension buttons upon installation.
- "required_extension": ["Extension name", "Another extension name", ...] - Checks for required extensions before installation. If any of the extensions are not installed, the extension will not be installed either.


---------------------------------
- 4. Troubleshooting Extensions -
---------------------------------

You can troubleshoot extensions just as any other JavaScript code:

1. Install the extension via SAMMI Core - Bridge - Install extension.
2. Open Bridge in a browser rather than OBS Dock. (It is suggested to use Chrome or a chromium based browser as other browsers may not interact with the bridge properly)
3. Open the browser developer console (F12)
4. Check for errors in the console
5. Monitor websocket traffic in the Network tab. You can see outgoing and incoming packets from SAMMI Core (must reload Bridge while console is open to see this)

You can also open bridge.html in your favorite text editor, find your specific extension code and debug it there. It’s often simpler and easier than editing the .sef file directly and reinstalling it in SAMMI Core.
